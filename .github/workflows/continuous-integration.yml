name: CI

on:
  push:
    branches: [master]
  pull_request:

jobs:
  lint:
    name: Lint and Vet
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x
      - name: Check out code
        uses: actions/checkout@v2
      - name: Install golint
        run: go get golang.org/x/lint/golint
      - name: Lint Go source code
        run: golint -set_exit_status ./...
      - name: Vet Go source code
        run: go vet ./...

  test:
    name: Unit tests
    strategy:
      matrix:
        go-version: [1.13.x, 1.14.x, 1.15.x]
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Fetch dependencies
        run: |
          go get -v -t -d ./...
      - name: Run unit tests
        run: go test ./...

      # - name: Codecov
      #   if: ${{ matrix.go-version == '1.14.x' && matrix.platform == 'ubuntu-latest' }}
      #   uses: codecov/codecov-action@v1
      #   with:
      #     file: coverage.out

  build:
    needs: [test]
    strategy:
      matrix:
        include:
          - descrip: linux-amd64
            os: ubuntu-latest
            envflags: CGO_ENABLED=1 GOOS=linux GOARCH=amd64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
          - descrip: linux-arm64
            os: ubuntu-latest
            chain: gcc-aarch64-linux-gnu
            envflags: CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
          - descrip: linux-armv7
            os: ubuntu-latest
            chain: gcc-arm-linux-gnueabihf
            envflags: CC=arm-linux-gnueabihf-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm GOARM=7
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
          - descrip: win-amd64
            os: ubuntu-latest
            envflags: CC=x86_64-w64-mingw32-gcc CGO_ENABLED=1 GOOS=windows GOARCH=amd64
            goflags: -ldflags '-linkmode external -extldflags "-static" -s -w'
            chain: gcc-mingw-w64-x86-64
            ext: .exe
          - descrip: osx-amd64
            os: macos-latest

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install cross compile chain
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install ${{matrix.chain}}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.x
      - name: Check out code
        uses: actions/checkout@v2
      - name: Build
        run: |
          go generate ./...
          ${{ matrix.envflags }} go build -o shiori-${{ matrix.descrip }}${{ matrix.ext }} -a ${{ matrix.goflags }} .
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: shiori-*

  docker:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get SHA
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push docker
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: |
            go-shiori/shiori:${{ steps.vars.outputs.sha_short }}
